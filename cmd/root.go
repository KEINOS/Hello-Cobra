/*
Package cmd rootCmd is a mother command of all it's child(subcommands).

Each subcommands should add(register) themself in their `init()` via
`rootCmd.AddCommand()`.
*/
package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

/*
===============================================================================
 Root command
===============================================================================
*/

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "Hello-Cobra",
	Short: "Sample command of Cobra usage.",
	Long: `About:
	Simple CLI app to see how Cobra works to create commands.`,
}

// Global flags and configuration if any
func init() {
	// Maybe we should implement this with a test someday.
	//rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.Hello-Cobra.yaml)")

	// Default local flag generated by Cobra. Does nothing.
	rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

/*
===============================================================================
 Exported functions of cmd package. https://tour.golang.org/basics/3
===============================================================================
*/

// Echo is an alias of Println to ease testing or mock the output.
func Echo(msg string) {
	fmt.Println(msg)
}

// EchoIfError is an STDERR wrappter. Returns a bool to let main.go take
// controll to exit.
func EchoIfError(msg error) int {
	if msg != nil {
		fmt.Fprintln(os.Stderr, msg)
		return 1
	}
	return 0
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() error {
	return rootCmd.Execute()
}
